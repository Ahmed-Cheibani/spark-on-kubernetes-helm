# Default values for Jupyter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 0
  #   maxUnavailable: 1

image:
  repository: sasnouskikh/jupyter
  tag: 4.4.0-sparkmagic_0.12.9
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

livyEndpoint: "" # required, eg: "http://spark-cluster-livy:80"
protocol: http
host: "" # FQDN for external access, eg.: my-cluster.example.com
baseUrl: / # eg.: /jupyter

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    #
    # External auth with OAuth2: https://kubernetes.github.io/ingress-nginx/examples/auth/oauth-external-auth/#external-oauth-authentication
    # nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
    # nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
    #
    # Basic auth
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: secret-namespace/auth-secret
    # nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    #
    # nginx.ingress.kubernetes.io/proxy-read-timeout: 86400s
  path: /
  # path: /jupyter
  hosts:
  - jupyter.local # Set to endpoint hostname to accept requests to
  tls: [] # Configure tls, Certmanager will do the work with Certs for you if properly configured
  # - secretName: jupyter-tls
  #   hosts:
  #   - jupyter.local

imagePullSecrets: []
# - name: image-pull-secret-name

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     nodeSelectorTerms:
  #     - matchExpressions:
  #       - key: autoscale-retain
  #         operator: In
  #         values:
  #         - "true"

notebooks:
  default:
    fromDir: notebooks/default
# TODO: add `fromJson: '{"json_content":"..."}'` option

## Persist data to a persistent volume
persistence:
  enabled: false
  # subPath: ""

  ## If defined, will use the existing PVC and will not create a new one.
  # existingClaim: ""

  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner. (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 20Gi
  annotations: {}

env: {}
  # JUPYTER_ENV: {value: "value" }
  # JUPYTER_ENV_VAR_FROM_CONFIG_MAP:
  #   valueFrom:
  #     configMapKeyRef:
  #       name: myconfig
  #       key: config.key
  # JUPYTER_ENV_VAR_FROM_SECRET:
  #   valueFrom:
  #     secretKeyRef:
  #       name: mysecret
  #       key: secret.key

envFrom: []
# - configMapRef:
#     name: env-configmap
# - secretRef:
#     name: env-secrets

args:
  common:
  - --NotebookApp.iopub_data_rate_limit=1000000000
  auth:
  - --NotebookApp.token=''
  # moreArgs:
  # - --Arg1='value1'
  # - --Arg2='value2'
  # - ...
